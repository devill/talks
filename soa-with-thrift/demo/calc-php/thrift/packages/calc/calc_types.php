<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['E_BinaryOperation'] = array(
  'ADDITION' => 1,
  'SUBTRACTION' => 2,
  'MULTIPLICATION' => 3,
  'DIVISION' => 4,
  'MODULUS' => 5,
);

final class BinaryOperation {
  const ADDITION = 1;
  const SUBTRACTION = 2;
  const MULTIPLICATION = 3;
  const DIVISION = 4;
  const MODULUS = 5;
  static public $__names = array(
    1 => 'ADDITION',
    2 => 'SUBTRACTION',
    3 => 'MULTIPLICATION',
    4 => 'DIVISION',
    5 => 'MODULUS',
  );
}

class ArithmeticOperation {
  static $_TSPEC;

  public $op = null;
  public $lh_term = null;
  public $rh_term = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'op',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'lh_term',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'rh_term',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['op'])) {
        $this->op = $vals['op'];
      }
      if (isset($vals['lh_term'])) {
        $this->lh_term = $vals['lh_term'];
      }
      if (isset($vals['rh_term'])) {
        $this->rh_term = $vals['rh_term'];
      }
    }
  }

  public function getName() {
    return 'ArithmeticOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lh_term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rh_term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ArithmeticOperation');
    if ($this->op !== null) {
      $xfer += $output->writeFieldBegin('op', TType::I32, 1);
      $xfer += $output->writeI32($this->op);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lh_term !== null) {
      $xfer += $output->writeFieldBegin('lh_term', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->lh_term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rh_term !== null) {
      $xfer += $output->writeFieldBegin('rh_term', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->rh_term);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ArithmeticException extends TException {
  static $_TSPEC;

  public $msg = null;
  public $x = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'x',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['x'])) {
        $this->x = $vals['x'];
      }
    }
  }

  public function getName() {
    return 'ArithmeticException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ArithmeticException');
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 1);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x !== null) {
      $xfer += $output->writeFieldBegin('x', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->x);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
